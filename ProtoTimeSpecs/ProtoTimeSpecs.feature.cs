// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ProtoTimeSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Stamping a date")]
    [NUnit.Framework.CategoryAttribute("prototime")]
    public partial class StampingADateFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProtoTimeSpecs.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Stamping a date", "In order to format dates in a more programmer-friendly way\r\nthe FormatLike\r\nforma" +
                    "ts a date given a human-readable example.", new string[] {
                        "prototime"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Formatting dates by example")]
        [NUnit.Framework.CategoryAttribute("date")]
        [NUnit.Framework.TestCaseAttribute("January", "September", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Jan", "Sep", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Jan 1", "Sep  8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Jan 01", "Sep 08", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Jan 10", "Sep 08", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Jan 1, 1999", "Sep  8, 2011", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Monday", "Thursday", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Tue, Jan 1", "Thu, Sep  8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Tuesday, January 1, 1999", "Thursday, September  8, 2011", new string[0])]
        [NUnit.Framework.TestCaseAttribute("01/1999", "09/2011", new string[0])]
        [NUnit.Framework.TestCaseAttribute("01/01", "09/08", new string[0])]
        [NUnit.Framework.TestCaseAttribute("01/31", "09/08", new string[0])]
        [NUnit.Framework.TestCaseAttribute("01/99", "09/11", new string[0])]
        [NUnit.Framework.TestCaseAttribute("01/01/1999", "09/08/2011", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12/31/99", "09/08/11", new string[0])]
        [NUnit.Framework.TestCaseAttribute("31/12", "08/09", new string[0])]
        [NUnit.Framework.TestCaseAttribute("31/12/99", "08/09/11", new string[0])]
        [NUnit.Framework.TestCaseAttribute("31-Jan-1999", "08-Sep-2011", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1999-12-31", "2011-09-08", new string[0])]
        [NUnit.Framework.TestCaseAttribute("DOB: 12-31-1999", "DOB: 09-08-2011", new string[0])]
        public virtual void FormattingDatesByExample(string example, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "date"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Formatting dates by example", @__tags);
#line 8
  this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given("the date September 8, 2011");
#line 10
    testRunner.When(string.Format("I stamp the example \"{0}\"", example));
#line 11
    testRunner.Then(string.Format("I produce \"{0}\"", output));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Formatting times by example")]
        [NUnit.Framework.CategoryAttribute("time")]
        [NUnit.Framework.TestCaseAttribute("8:59 am", "1:31 pm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8:59am", "1:31pm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("08:59 AM", "01:31 PM", new string[0])]
        [NUnit.Framework.TestCaseAttribute("08:59 PM", "01:31 PM", new string[0])]
        [NUnit.Framework.TestCaseAttribute("23:59", "13:31", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8:59:59 am", "1:31:27 pm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("08:59:59 AM", "01:31:27 PM", new string[0])]
        [NUnit.Framework.TestCaseAttribute("08:59:59 PM", "01:31:27 PM", new string[0])]
        [NUnit.Framework.TestCaseAttribute("23:59:59", "13:31:27", new string[0])]
        public virtual void FormattingTimesByExample(string example, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "time"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Formatting times by example", @__tags);
#line 37
  this.ScenarioSetup(scenarioInfo);
#line 38
    testRunner.Given("the time September 8, 2011 at 13:31:27");
#line 39
    testRunner.When(string.Format("I stamp the example \"{0}\"", example));
#line 40
    testRunner.Then(string.Format("I produce \"{0}\"", output));
#line 41
      testRunner.And("I like turtles");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Formatting dates and times by example")]
        [NUnit.Framework.CategoryAttribute("date")]
        [NUnit.Framework.CategoryAttribute("time")]
        [NUnit.Framework.TestCaseAttribute("Jan 1, 1999 8:59 am", "Sep  8, 2011  1:31 pm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("08:59 AM 1999-12-31", "01:31 PM 2011-09-08", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Date: Jan 1, 1999 Time: 8:59 am", "Date: Sep  8, 2011 Time:  1:31 pm", new string[0])]
        public virtual void FormattingDatesAndTimesByExample(string example, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "date",
                    "time"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Formatting dates and times by example", @__tags);
#line 57
  this.ScenarioSetup(scenarioInfo);
#line 58
    testRunner.Given("the time September 8, 2011 at 13:31:27");
#line 59
    testRunner.When(string.Format("I stamp the example \"{0}\"", example));
#line 60
    testRunner.Then(string.Format("I produce \"{0}\"", output));
#line 61
      testRunner.And("I like turtles");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("strftime directives just get passed through")]
        public virtual void StrftimeDirectivesJustGetPassedThrough()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("strftime directives just get passed through", ((string[])(null)));
#line 69
  this.ScenarioSetup(scenarioInfo);
#line 70
    testRunner.Given("the date December 21, 2012");
#line 71
    testRunner.When("I stamp the example \"John Cusack was in a movie about %b %d, %Y, but it wasn\'t ve" +
                    "ry good.\"");
#line 72
    testRunner.Then("I produce \"John Cusack was in a movie about Dec 21, 2012, but it wasn\'t very good" +
                    ".\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Plain text just gets passed through")]
        public virtual void PlainTextJustGetsPassedThrough()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plain text just gets passed through", ((string[])(null)));
#line 74
  this.ScenarioSetup(scenarioInfo);
#line 75
    testRunner.Given("the date June 1, 1926");
#line 76
    testRunner.When("I stamp the example \"Marilyn Monroe was born on January 1, 1999.\"");
#line 77
    testRunner.Then("I produce \"Marilyn Monroe was born on June  1, 1926.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Aliases for the stamp method")]
        [NUnit.Framework.TestCaseAttribute("stamp_like", new string[0])]
        [NUnit.Framework.TestCaseAttribute("format_like", new string[0])]
        public virtual void AliasesForTheStampMethod(string alias, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aliases for the stamp method", exampleTags);
#line 79
  this.ScenarioSetup(scenarioInfo);
#line 80
    testRunner.Given("the date December 9, 2011");
#line 81
    testRunner.When(string.Format("I call \"{0}\" with \"1999-01-31\"", alias));
#line 82
    testRunner.Then("I produce \"2011-12-09\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Examples that aren\'t supported yet")]
        [NUnit.Framework.CategoryAttribute("wip")]
        [NUnit.Framework.TestCaseAttribute("8 am", "1 pm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8am", "1pm", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8AM", "1PM", new string[0])]
        public virtual void ExamplesThatArenTSupportedYet(string example, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "wip"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Examples that aren\'t supported yet", @__tags);
#line 90
  this.ScenarioSetup(scenarioInfo);
#line 91
    testRunner.Given("the time September 8, 2011 at 13:31:27");
#line 92
    testRunner.When(string.Format("I stamp the example \"{0}\"", example));
#line 93
    testRunner.Then(string.Format("I produce \"{0}\"", output));
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
